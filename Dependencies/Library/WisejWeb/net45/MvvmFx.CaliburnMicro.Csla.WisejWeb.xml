<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmFx.CaliburnMicro.Csla.WisejWeb</name>
    </assembly>
    <members>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModel`2">
            <summary>
            An implementation of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that holds on to and activates only one item at a time
            and also implements <see cref="T:MvvmFx.CaliburnMicro.IHaveModel" />.
            </summary>
            <typeparam name="TC">The type that is being conducted.</typeparam>
            <typeparam name="TM">Type of the Model object.</typeparam>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Indicates whether this instance will be closed.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection">
            <summary>
            An implementation of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that holds on many items
            and also implements <see cref="T:MvvmFx.CaliburnMicro.IHaveModel" />.
            </summary>
            <summary>
            An implementation of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that holds on many items
            and also implements <see cref="T:MvvmFx.CaliburnMicro.IHaveModel" />.
            </summary>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive">
            <summary>
            An implementation of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that holds on to many items wich are all activated.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive" /> class.
            </summary>
            <param name="openPublicItems">if set to <c>true</c> opens public items that are properties of this class.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive" /> class.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Indicates whether this instance will be closed.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.OnInitialize">
            <summary>
            Called when initializing.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.AllActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive">
            <summary>
            An implementation of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that holds on many items but only activates one at a time.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive" /> class.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.Items">
            <summary>
            Gets the items that are currently being conducted.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.DetermineNextItemToActivate(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Determines the next item to activate based on the last active index.
            </summary>
            <param name="list">The list of possible active items.</param>
            <param name="lastIndex">The index of the last active item.</param>
            <returns>The next item to activate.</returns>
            <remarks>Called after an active item is closed.</remarks>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.CanClose(System.Action{System.Boolean})">
            <summary>
            Called to check whether or not this instance can close.
            </summary>
            <param name="callback">The implementor calls this action with the result of the close check.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.OnActivate">
            <summary>
            Called when activating.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.OnDeactivate(System.Boolean)">
            <summary>
            Called when deactivating.
            </summary>
            <param name="close">Indicates whether this instance will be closed.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModel`2.Collection.OneActive.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModelBase`2">
            <summary>
            A base class for various implementations of <see cref="T:MvvmFx.CaliburnMicro.IConductor" />
            and also implements <see cref="T:MvvmFx.CaliburnMicro.IHaveModel" />.
            </summary>
            <typeparam name="TC">The type that is being conducted.</typeparam>
            <typeparam name="TM">Type of the Model object.</typeparam>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.CloseStrategy">
            <summary>
            Gets or sets the close strategy.
            </summary>
            <value>The close strategy.</value>
        </member>
        <member name="E:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.ActivationProcessed">
            <summary>
            Occurs when an activation request is processed.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns>The collection of children.</returns>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.ActivateItem(`0)">
            <summary>
            Activates the specified item.
            </summary>
            <param name="item">The item to activate.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.DeactivateItem(`0,System.Boolean)">
            <summary>
            Deactivates the specified item.
            </summary>
            <param name="item">The item to close.</param>
            <param name="close">Indicates whether or not to close the item after deactivating it.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.OnActivationProcessed(`0,System.Boolean)">
            <summary>
            Called by a subclass when an activation needs processing.
            </summary>
            <param name="item">The item on which activation was attempted.</param>
            <param name="success">if set to <c>true</c> activation was successful.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBase`2.EnsureItem(`0)">
            <summary>
            Ensures that an item is ready to be activated.
            </summary>
            <param name="newItem"></param>
            <returns>The item to be activated.</returns>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ConductorWithModelBaseWithActiveItem`2">
            <summary>
            A base class for various implementations of <see cref="T:MvvmFx.CaliburnMicro.IConductor" /> that maintains an active item
            and also implements <see cref="T:MvvmFx.CaliburnMicro.IHaveModel" />.
            </summary>
            <typeparam name="TC">The type that is being conducted.</typeparam>
            <typeparam name="TM">Type of the Model object.</typeparam>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ConductorWithModelBaseWithActiveItem`2.ActiveItem">
            <summary>
            The currently active item.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ConductorWithModelBaseWithActiveItem`2.MvvmFx#CaliburnMicro#IHaveActiveItem#ActiveItem">
            <summary>
            The currently active item.
            </summary>
            <value></value>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ConductorWithModelBaseWithActiveItem`2.ChangeActiveItem(`0,System.Boolean)">
            <summary>
            Changes the active item.
            </summary>
            <param name="newItem">The new item to activate.</param>
            <param name="closePrevious">Indicates whether or not to close the previous active item.</param>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ScreenWithModel`1">
            <summary>
            Base class used to create ScreenWithModel objects, with pre-existing verbs for use by InvokeMethod or Invoke.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.Save">
            <summary>
            Saves the Model, first committing changes if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.Cancel">
            <summary>
            Cancels changes made to the model if ManagedObjectLifetime is true.
            The Model state is reverted to the initial state and is prepared for editing again.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.AddNew">
            <summary>
            Adds a new item to the Model (use it for collection items).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.Remove(System.Object,MvvmFx.CaliburnMicro.ExecuteEventArgs)">
            <summary>
            Removes an item from the Model (use it for collection items).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.Delete">
            <summary>
            Marks the Model for deletion.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.DeleteImmediate">
            <summary>
            Immediately deletes the Model.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModel`1.Close">
            <summary>
            Cancels changes made to the Model if ManagedObjectLifetime is true.
            Unlike Cancel, the Model isn't prepared for editing (again).
            </summary>
        </member>
        <member name="T:MvvmFx.CaliburnMicro.ScreenWithModelBase`1">
            <summary>
            Base class used to create ScreenWithModel objects that implement their own commands/verbs/actions.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.#ctor">
            <summary>
            Create new instance of base class used to create ScreenWithModel objects
            that implement their own commands/verbs/actions.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.#ctor(System.Boolean)">
            <summary>
            Create new instance of base class used to create ScreenWithModel objects
            that implement their own commands/verbs/actions.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.InitAsync">
            <summary>
            Method used to perform async initialization of the viewmodel.
            This method is usually invoked immediately following construction of the object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoInitAsync">
            <summary>
            Override this method to implement async initialization of the model object.
            The result of this method is used to set the Model property of the viewmodel.
            </summary>
            <returns>A Task that creates the model object.</returns>
        </member>
        <member name="F:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.ModelProperty">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.Model">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="F:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.ManageObjectLifetimeProperty">
            <summary>
            Gets or sets a value indicating whether the ViewModel
            should automatically managed the lifetime of the Model.
            </summary>
            <remarks>Manage object lifetime means managing undo.</remarks>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.ManageObjectLifetime">
            <summary>
            Gets or sets a value indicating whether the ViewModel
            should automatically managed the lifetime of the Model.
            </summary>
            <remarks>Manage object lifetime means managing undo.</remarks>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.Error">
            <summary>
            Gets the Error object corresponding to the last asynchronous operation.
            </summary>
        </member>
        <member name="E:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.ErrorOccurred">
            <summary>
            Event raised when an error occurs during processing.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnError(System.Exception)">
            <summary>
            Raises ErrorOccurred event when an error occurs during processing.
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this object is executing an asynchronous process.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.IsDirty">
            <summary>
            Gets a value indicating whether the Model has been changed.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.IsValid">
            <summary>
            Gets a value indicating whether the Model is currently valid (has no broken rules).
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanSave">
            <summary>
            Gets a value indicating whether the Model can currently be saved.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanCancel">
            <summary>
            Gets a value indicating whether the Model can currently be canceled.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanCreate">
            <summary>
            Gets a value indicating whether an instance of the Model can currently be created.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanDelete">
            <summary>
            Gets a value indicating whether the Model can currently be deleted.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanFetch">
            <summary>
            Gets a value indicating whether an instance of the Model can currently be retrieved.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanRemove">
            <summary>
            Gets a value indicating whether the Model can currently be removed.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanAddNew">
            <summary>
            Gets a value indicating whether the Model can currently be added.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanCreateObject">
            <summary>
            Gets a value indicating whether the current user is authorized to create a Model.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanGetObject">
            <summary>
            Gets a value indicating whether the current user is authorized to retrieve a Model.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanEditObject">
            <summary>
            Gets a value indicating whether the current user is authorized to save (insert or update a Model.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.CanDeleteObject">
            <summary>
            Gets a value indicating whether the current user is authorized to delete a Model.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.SetPropertiesAtObjectLevel">
            <summary>
            This method is only called from constuctor to set default values immediately.
            Sets the properties at object level.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.Unbind(System.Object,System.Boolean)">
            <summary>
            Unbinds the specified source.
            </summary>
            <param name="source">The source Model.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoRefresh(System.Func{`0})">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Static factory method function.</param>
            <example>DoRefresh(BusinessList.GetList)</example>
            <example>DoRefresh(() => BusinessList.GetList())</example>
            <example>DoRefresh(() => BusinessList.GetList(id))</example>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.BeginRefresh(System.Action{System.EventHandler{Csla.DataPortalResult{`0}}})">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Static factory method action.</param>
            <example>BeginRefresh(BusinessList.BeginGetList)</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(handler))</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(id, handler))</example>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.BeginRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.BeginRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnRefreshing(`0)">
            <summary>
            Method called after a refresh operation has completed and before the model is updated (when successful).
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnRefreshed">
            <summary>
            Method called after a refresh operation has completed (whether successful or not).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoSave">
            <summary>
            Saves the Model, first committing changes if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.SaveAsync">
            <summary>
            Saves the Model, first committing changes if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.BeginSave">
            <summary>
            Saves the Model, first committing changes if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnSaving(`0)">
            <summary>
            Method called after a save operation has completed and before Model is updated (when successful).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnSaved">
            <summary>
            Method called after a save operation has completed (whether successful or not).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoCancel">
            <summary>
            Cancels changes made to the model if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.BeginAddNew">
            <summary>
            Adds a new item to the Model (if it is a collection).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoAddNew">
            <summary>
            Adds a new item to the Model (if it is a collection).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoRemove(System.Object)">
            <summary>
            Removes an item from the Model (if it is a collection).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoDelete">
            <summary>
            Marks the Model for deletion (if it is an editable root object).
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.DoClose">
            <summary>
            Disconnects from the source object and cancels changes made to the model if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnModelChanged(`0,`0)">
            <summary>
            Invoked when the Model changes, allowing event handlers to be unhooked from the old object and hooked on the new object.
            </summary>
            <param name="oldValue">Previous Model reference.</param>
            <param name="newValue">New Model reference.</param>
        </member>
        <member name="M:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.OnSetProperties">
            <summary>
            Override this method to hook into to logic of setting properties when model is changed or edited.
            </summary>
        </member>
        <member name="P:MvvmFx.CaliburnMicro.ScreenWithModelBase`1.MvvmFx#CaliburnMicro#IHaveModel#Model">
            <summary>
            Gets or sets the Model property of the ScreenWithModel object.
            </summary>
        </member>
    </members>
</doc>
